ORIGIN 0
SEGMENT
CodeSegment ; zachrice testcode
	;; Clear Registers
	AND R0, R0, 0
	AND R1, R1, 0
	AND R2, R2, 0
	AND R3, R3, 0
	AND R4, R4, 0
	AND R5, R5, 0
	AND R6, R6, 0

	;; TESTING JSR
	JSR TESTJMP 	; PC <= TESTJMP
	LDR R0, DATA 	; R0 <= Modified DATA

	;; TESTING LDI/STI
	LDI R5, R0, POINTER 	; R5 <= FEED
	STI R5, R0, STPOINTER 	; MySData <= FEED
	LDR R4, MySData 		; R4 <= FEED

	;; TESTING LDB/STB
	LDB R2, R0, LOWBYTE 	; R2 <= 000D
	LDB R3, R0, HIGHBYTE 	; R3 <= 0060
	ADD R2, R2, 1 			; R2 <= 000E
	ADD R3, R3, 1 			; R3 <= 0061
	STB R3, R0, LOWSTORE	; LOWSTORE <= 000E
	STB R4, R0, HIGHSTORE 	; HIGHSTORE <= 0061 
	LDR R5, LOWSTORE 		; LOWSTORE <= 000E
	LDR R6, HIGHSTORE 		; HIGHSTORE <= 0061


TESTJSR:
	LEA R1, DATA 	; R1 <= [DATA] (address of DATA)
	AND R2, 0		; R2 <= 0
	ADD R2, R2, 10	; R2 <= 10
	;; TESTING STR
	STR R2, DATA 	; DATA = 10
	;; TESTING JMP
	JMP GOOD
	BRnzp HALT
GOOD:
	LDR R5, GOOD	; R5 <= GOOD 
	RET

HALT:
	BRnzp HALT




DATA: DATA2 5
BADBAD: DATA2 4x0BAD
GOOD: DATA 4x600D

;; Data for STI/LDI
POINTER: DATA2 MyData
MyData: DATA2 4xFEED
STPOINTER: DATA2 MySData
MySData: DATA2 ?

;; Data for LDB/STB
LOWBYTE: DATA1 4x0D
HIGHBYTE: DATA1 4x60
LOWSTOREBYTE: DATA1 ?
HIGHSTOREBYTE: DATA1 ?
